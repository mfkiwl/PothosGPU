OneToOneBlocks:
        #
        # af/arith.h
        #

        - func: abs
          niceName: Absolute Value
          header: arith
          supportedTypes:
                  supportInt: true
                  supportFloat: true
                  supportComplex: true

        - func: arg
          niceName: Phase of Complex Number
          header: arith
          description: Phase of a number in the complex plane.
          pattern: ComplexToFloat

        - func: round
          header: arith
          description: Round to nearest integer.
          supportedTypes:
                  supportFloat: true

        - func: trunc
          niceName: Truncate
          header: arith
          description: Truncate to nearest integer towards zero.
          supportedTypes:
                  supportFloat: true

        - func: floor
          header: arith
          description: Round to nearest lower integer.
          supportedTypes:
                  supportFloat: true

        - func: ceil
          header: arith
          description: Round to nearest higher integer.
          supportedTypes:
                  supportFloat: true

        - func: sin
          niceName: Sine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: cos
          niceName: Cosine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: tan
          niceName: Tangent
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: asin
          niceName: Arc Sine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: acos
          niceName: Arc Cosine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: atan
          niceName: Arc Tangent
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: real
          niceName: Complex to Real
          category: Convert
          header: arith
          pattern: ComplexToFloat

        - func: imag
          niceName: Complex to Imaginary
          category: Convert
          header: arith
          pattern: ComplexToFloat

        - func: conjg
          niceName: Complex Conjugate
          header: arith
          supportedTypes:
                  supportComplexFloat: true

        - func: sinh
          niceName: Hyperbolic Sine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: cosh
          niceName: Hyperbolic Cosine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: tanh
          niceName: Hyperbolic Tangent
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: asinh
          niceName: Hyperbolic Arc Sine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: acosh
          niceName: Hyperbolic Arc Cosine
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: atanh
          niceName: Hyperbolic Arc Tangent
          category: Trigonometry
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: sigmoid
          niceName: Sigmoid
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: exp
          niceName: Exponential
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: expm1
          niceName: exp(x) - 1
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: erf
          niceName: Error Function
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: erfc
          niceName: Complementary Error Function
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: log1p
          niceName: log(1 + x)
          header: arith
          description: Calculate <b>log(1+x)</b>. Most useful for small inputs.
          supportedTypes:
                  supportFloat: true

        - func: rsqrt
          niceName: Reciprocal Square Root
          header: arith
          description: Calculates <b>1 / sqrt(x)</b>.
          minAPIVersion: 37
          supportedTypes:
                  supportFloat: true

        - func: factorial
          header: arith
          description: For all positive integers, returns <b>x * (x-1) * ... * 1</b>.
          supportedTypes:
                  supportFloat: true

        - func: tgamma
          niceName: Gamma
          header: arith
          description: "<p>An extension of factorial numbers to include non-integral values.</p><p><b>Gamma(x) = (x-1)!</b></p>"
          supportedTypes:
                  supportFloat: true

        - func: lgamma
          niceName: Log Gamma
          description: Logarithm of absolute values of Gamma function.
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: sec
          niceName: Secant
          category: Trigonometry
          header: arith
          description: <b>sec(x) = 1 / cos(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: csc
          niceName: Cosecant
          category: Trigonometry
          header: arith
          description: <b>sec(x) = 1 / sin(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: cot
          niceName: Cotangent
          category: Trigonometry
          header: arith
          description: <b>sec(x) = 1 / tan(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: asec
          niceName: Arc Secant
          category: Trigonometry
          header: arith
          description: <b>asec(x) = acos(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: acsc
          niceName: Arc Cosecant
          category: Trigonometry
          header: arith
          description: <b>acsc(x) = asin(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: acot
          niceName: Arc Cotangent
          category: Trigonometry
          header: arith
          description: <b>acot(x) = atan(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: sech
          niceName: Hyperbolic Secant
          category: Trigonometry
          header: arith
          description: <b>sech(x) = 1 / cosh(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: csch
          niceName: Hyperbolic Cosecant
          category: Trigonometry
          header: arith
          description: <b>csch(x) = 1 / sinh(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: coth
          niceName: Hyperbolic Cotangent
          category: Trigonometry
          header: arith
          description: <b>coth(x) = 1 / tanh(x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: asech
          niceName: Hyperbolic Arc Secant
          category: Trigonometry
          header: arith
          description: <b>asech(x) = acosh(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: acsch
          niceName: Hyperbolic Arc Cosecant
          category: Trigonometry
          header: arith
          description: <b>acsch(x) = asinh(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: acoth
          niceName: Hyperbolic Arc Cotangent
          category: Trigonometry
          header: arith
          description: <b>acoth(x) = atanh(1 / x)</b>
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: sinc
          niceName: Sinc
          category: Signal
          header: signal
          description: "The Sinc function is defined as follows:
<ul>
<li><b>x = 0 -> sinc(x) = 1</b></li>
<li><b>x != 0 -> sinc(x) = (sin(x) / x)</b></li>
</ul>"
          testOnly: true
          supportedTypes:
                  supportFloat: true

        - func: flip
          category: Stream
          header: data
          description: Reverses the input stream and outputs the result. This block is most useful when applied to discrete sets of elements, such as the contents of a file.
          testOnly: true
          supportedTypes:
                  supportAll: true

TwoToOneBlocks:
        #
        # af/arith.h
        #

        - func: hypot
          niceName: Hypotenuse
          header: arith
          supportedTypes:
                  supportFloat: true

        - func: rem
          niceName: Remainder
          header: arith
          description: For each element in inputs <b>0</b> and <b>1</b>, returns the remainder of <b>port0 / port1</b>. Will throw if <b>port1</b> includes a 0.
          allowZeroInBuffer1: false
          supportedTypes:
                  supportInt: true
                  supportUInt: true
                  supportFloat: true

        - func: atan2
          niceName: Arc Tangent
          header: arith
          description: <b>atan2(y,x)</b> returns the angle between the ray to the point <b>(x, y)</b> and the positive <b>x</b> axis.
          supportedTypes:
                  supportFloat: true

NToOneBlocks:

        - func: min
          niceName: Minimum
          header: arith
          description: For each position in the given inputs, outputs the minimum value of all elements at that position.
          supportedTypes:
                  supportInt: true
                  supportUInt: true
                  supportFloat: true

        - func: max
          niceName: Maximum
          header: arith
          description: For each position in the given inputs, outputs the maximum value of all elements at that position.
          supportedTypes:
                  supportInt: true
                  supportUInt: true
                  supportFloat: true

        - func: setUnion
          blockName: set_union
          niceName: Set Union
          category: Stream
          header: algorithm
          description: Outputs the union of all input buffers, sorted in ascending order.
          testOnly: true
          postBuffer: true
          supportedTypes:
                  supportInt: true
                  supportUInt: true
                  supportFloat: true
