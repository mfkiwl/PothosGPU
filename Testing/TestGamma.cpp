// Copyright (c) 2020-2021 Nicholas Corgan
// SPDX-License-Identifier: BSD-3-Clause

#include "TestUtility.hpp"

#include <Pothos/Testing.hpp>
#include <Pothos/Framework.hpp>

#include <cstring>
#include <iostream>
#include <vector>

// To avoid collisions
namespace
{

template <typename T>
static void getGammaTestValues(
    Pothos::BufferChunk* pInput,
    Pothos::BufferChunk* pGammaOutput,
    Pothos::BufferChunk* pLGammaOutput)
{
    // np.linspace(1,2,100)
    *pInput = GPUTests::stdVectorToBufferChunk<T>(
    {
        1.        , 1.01010101, 1.02020202, 1.03030303, 1.04040404,
        1.05050505, 1.06060606, 1.07070707, 1.08080808, 1.09090909,
        1.1010101 , 1.11111111, 1.12121212, 1.13131313, 1.14141414,
        1.15151515, 1.16161616, 1.17171717, 1.18181818, 1.19191919,
        1.2020202 , 1.21212121, 1.22222222, 1.23232323, 1.24242424,
        1.25252525, 1.26262626, 1.27272727, 1.28282828, 1.29292929,
        1.3030303 , 1.31313131, 1.32323232, 1.33333333, 1.34343434,
        1.35353535, 1.36363636, 1.37373737, 1.38383838, 1.39393939,
        1.4040404 , 1.41414141, 1.42424242, 1.43434343, 1.44444444,
        1.45454545, 1.46464646, 1.47474747, 1.48484848, 1.49494949,
        1.50505051, 1.51515152, 1.52525253, 1.53535354, 1.54545455,
        1.55555556, 1.56565657, 1.57575758, 1.58585859, 1.5959596 ,
        1.60606061, 1.61616162, 1.62626263, 1.63636364, 1.64646465,
        1.65656566, 1.66666667, 1.67676768, 1.68686869, 1.6969697 ,
        1.70707071, 1.71717172, 1.72727273, 1.73737374, 1.74747475,
        1.75757576, 1.76767677, 1.77777778, 1.78787879, 1.7979798 ,
        1.80808081, 1.81818182, 1.82828283, 1.83838384, 1.84848485,
        1.85858586, 1.86868687, 1.87878788, 1.88888889, 1.8989899 ,
        1.90909091, 1.91919192, 1.92929293, 1.93939394, 1.94949495,
        1.95959596, 1.96969697, 1.97979798, 1.98989899, 2.
    });

    // scipy.special.gamma(np.linspace(1,2,100))
    *pGammaOutput = GPUTests::stdVectorToBufferChunk<T>(
    {
        1.        , 0.99426953, 0.98873541, 0.98339239, 0.97823543,
        0.97325971, 0.9684606 , 0.96383367, 0.95937467, 0.95507953,
        0.95094434, 0.94696535, 0.94313896, 0.93946173, 0.93593033,
        0.93254159, 0.92929247, 0.92618001, 0.92320142, 0.920354  ,
        0.91763513, 0.91504235, 0.91257324, 0.91022551, 0.90799696,
        0.90588546, 0.90388899, 0.90200558, 0.90023336, 0.89857052,
        0.89701535, 0.89556617, 0.8942214 , 0.89297951, 0.89183904,
        0.89079857, 0.88985677, 0.88901234, 0.88826405, 0.88761071,
        0.8870512 , 0.88658443, 0.88620937, 0.88592502, 0.88573045,
        0.88562476, 0.88560708, 0.88567661, 0.88583256, 0.8860742 ,
        0.88640082, 0.88681176, 0.8873064 , 0.88788415, 0.88854443,
        0.88928673, 0.89011056, 0.89101544, 0.89200094, 0.89306668,
        0.89421226, 0.89543735, 0.89674164, 0.89812482, 0.89958664,
        0.90112687, 0.90274529, 0.90444172, 0.906216  , 0.908068  ,
        0.90999759, 0.91200471, 0.91408927, 0.91625124, 0.9184906 ,
        0.92080735, 0.92320151, 0.92567315, 0.92822231, 0.93084909,
        0.9335536 , 0.93633598, 0.93919636, 0.94213493, 0.94515186,
        0.94824738, 0.95142172, 0.95467512, 0.95800785, 0.96142021,
        0.96491249, 0.96848503, 0.97213817, 0.97587228, 0.97968774,
        0.98358495, 0.98756433, 0.99162632, 0.99577139, 1.
    });

    // scipy.special.gammaln(np.linspace(1,2,100))
    *pLGammaOutput = GPUTests::stdVectorToBufferChunk<T>(
    {
         0.        , -0.00574695, -0.01132852, -0.01674706, -0.02200491,
        -0.02710431, -0.03204748, -0.03683654, -0.04147359, -0.04596066,
        -0.05029975, -0.05449278, -0.05854165, -0.0624482 , -0.06621424,
        -0.06984152, -0.07333177, -0.07668666, -0.07990784, -0.0829969 ,
        -0.08595542, -0.08878494, -0.09148694, -0.0940629 , -0.09651425,
        -0.0988424 , -0.10104873, -0.10313457, -0.10510126, -0.10695009,
        -0.10868231, -0.11029917, -0.11180188, -0.11319164, -0.11446962,
        -0.11563695, -0.11669477, -0.11764416, -0.11848623, -0.11922202,
        -0.11985257, -0.12037892, -0.12080205, -0.12112295, -0.1213426 ,
        -0.12146194, -0.1214819 , -0.1214034 , -0.12122733, -0.12095459,
        -0.12058604, -0.12012254, -0.11956492, -0.11891401, -0.11817063,
        -0.11733556, -0.1164096 , -0.11539353, -0.11428809, -0.11309403,
        -0.1118121 , -0.11044302, -0.10898749, -0.10744622, -0.10581991,
        -0.10410922, -0.10231483, -0.10043741, -0.09847759, -0.09643602,
        -0.09431332, -0.09211013, -0.08982705, -0.08746468, -0.08502361,
        -0.08250444, -0.07990774, -0.07723408, -0.07448402, -0.07165811,
        -0.0687569 , -0.06578092, -0.06273071, -0.05960678, -0.05640966,
        -0.05313986, -0.04979787, -0.04638419, -0.04289931, -0.03934371,
        -0.03571787, -0.03202225, -0.02825733, -0.02442356, -0.0205214 ,
        -0.01655127, -0.01251364, -0.00840893, -0.00423758,  0.
    });
}

template <typename T>
static void testGamma()
{
    const Pothos::DType dtype(typeid(T));
    std::cout << "Testing " << dtype.toString() << "..." << std::endl;

    Pothos::BufferChunk input, tGammaOutput, lGammaOutput;
    getGammaTestValues<T>(&input, &tGammaOutput, &lGammaOutput);

    auto feeder = Pothos::BlockRegistry::make("/blocks/feeder_source", dtype);
    feeder.call("feedBuffer", input);

    auto tGamma = Pothos::BlockRegistry::make("/gpu/arith/tgamma", "Auto", dtype);
    auto lGamma = Pothos::BlockRegistry::make("/gpu/arith/lgamma", "Auto", dtype);

    auto tGammaCollector = Pothos::BlockRegistry::make("/blocks/collector_sink", dtype);
    auto lGammaCollector = Pothos::BlockRegistry::make("/blocks/collector_sink", dtype);

    {
        Pothos::Topology topology;

        topology.connect(feeder, 0, tGamma, 0);
        topology.connect(tGamma, 0, tGammaCollector, 0);

        topology.connect(feeder, 0, lGamma, 0);
        topology.connect(lGamma, 0, lGammaCollector, 0);

        topology.commit();
        POTHOS_TEST_TRUE(topology.waitInactive(0.01));
    }

    std::cout << " * Testing /gpu/arith/tgamma..." << std::endl;
    GPUTests::testBufferChunk(
        tGammaOutput,
        tGammaCollector.call<Pothos::BufferChunk>("getBuffer"));

    std::cout << " * Testing /gpu/arith/lgamma..." << std::endl;
    GPUTests::testBufferChunk(
        lGammaOutput,
        lGammaCollector.call<Pothos::BufferChunk>("getBuffer"));
}

POTHOS_TEST_BLOCK("/gpu/tests", test_gamma)
{
    testGamma<float>();
    testGamma<double>();
}

}
